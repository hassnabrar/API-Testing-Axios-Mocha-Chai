{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-19T14:18:59.740Z",
    "end": "2023-12-19T14:19:05.710Z",
    "duration": 5970,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2a922a5e-b4b1-4efd-aeda-f797d9a159f4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
          "title": "Getting data from each data stream",
          "fullFile": "D:\\axios\\Assignment-Axios\\api-tests\\task1.js",
          "file": "\\api-tests\\task1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Getting list of Agents",
              "fullTitle": "Getting data from each data stream Getting list of Agents",
              "timedOut": false,
              "duration": 1243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n    method: 'get',\n    maxBodyLength: Infinity,\n    url: 'https://hassan.freshdesk.com/api/v2/agents',\n    headers: { \n      'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA=='\n    }\n  };\n  \n  await axios.request(config)\n  .then(async (response) => {\n    expect(response.status).to.deep.equal(200);\n    expect(response.data.length).to.deep.equal(1);\n  })\n  .catch(async(error) => {\n    console.log(await error);\n  });",
              "err": {},
              "uuid": "cbc65b64-8253-4bf9-8f23-4bcf5d004700",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting list of Companies",
              "fullTitle": "Getting data from each data stream Getting list of Companies",
              "timedOut": false,
              "duration": 326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/companies',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==',\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(1);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "bc6bc9a1-6962-46c8-95f0-35ccfddcc2fd",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting list of Contacts",
              "fullTitle": "Getting data from each data stream Getting list of Contacts",
              "timedOut": false,
              "duration": 1047,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/contacts',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==',\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(15);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "d672908d-0c27-46a5-95f7-fb72b5a8add9",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting list of Groups",
              "fullTitle": "Getting data from each data stream Getting list of Groups",
              "timedOut": false,
              "duration": 312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/groups',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==',\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(3);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "27474dbf-c774-4eaf-b9ec-ae4cb004341d",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting list of Roles",
              "fullTitle": "Getting data from each data stream Getting list of Roles",
              "timedOut": false,
              "duration": 291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/roles',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==',\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(6);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "4ef0ef85-0fa3-44db-9e9b-528cfdd9c25e",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting list of Surveys",
              "fullTitle": "Getting data from each data stream Getting list of Surveys",
              "timedOut": false,
              "duration": 337,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/surveys',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==',\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(1);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "e1bb7930-4d16-4040-9b7a-b4a2dfd713b7",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting list of Time Entries",
              "fullTitle": "Getting data from each data stream Getting list of Time Entries",
              "timedOut": false,
              "duration": 331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/time_entries',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA=='\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(1);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "e829ea18-9106-43b3-a8e8-322639c222ea",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting list of Tickets",
              "fullTitle": "Getting data from each data stream Getting list of Tickets",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/tickets',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA=='\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(3);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "c1d11992-d689-4040-beb1-e3127fbd2575",
              "parentUUID": "74a0dd1a-4ecc-43ea-9759-cf369d24c7c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbc65b64-8253-4bf9-8f23-4bcf5d004700",
            "bc6bc9a1-6962-46c8-95f0-35ccfddcc2fd",
            "d672908d-0c27-46a5-95f7-fb72b5a8add9",
            "27474dbf-c774-4eaf-b9ec-ae4cb004341d",
            "4ef0ef85-0fa3-44db-9e9b-528cfdd9c25e",
            "e1bb7930-4d16-4040-9b7a-b4a2dfd713b7",
            "e829ea18-9106-43b3-a8e8-322639c222ea",
            "c1d11992-d689-4040-beb1-e3127fbd2575"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4249,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d6aeeefd-51dc-470e-ae43-a1e93e4a77e4",
          "title": "Update using Post Request on Time Entries and checking for updation",
          "fullFile": "D:\\axios\\Assignment-Axios\\api-tests\\task1.js",
          "file": "\\api-tests\\task1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Updating Time Entries",
              "fullTitle": "Update using Post Request on Time Entries and checking for updation Updating Time Entries",
              "timedOut": false,
              "duration": 634,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = JSON.stringify({\n      \"note\": \"Invoice Prepration\",\n      \"time_spent\": \"10:40\",\n      \"agent_id\": 154006815986\n    });\n    \n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://hassan.freshdesk.com/api/v2/tickets/1/time_entries',\n      headers: { \n        'Content-Type': 'application/json', \n        'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA=='\n      },\n      data : data\n    };\n    \n    await axios.request(config)\n    .then((response) => {\n      expect(response.status).to.deep.equal(201);\n    })\n    .catch((error) => {\n      console.log(error);\n    });",
              "err": {},
              "uuid": "7a67abbe-36c0-4378-811a-698d870de499",
              "parentUUID": "d6aeeefd-51dc-470e-ae43-a1e93e4a77e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Geting updated Time Entries",
              "fullTitle": "Update using Post Request on Time Entries and checking for updation Geting updated Time Entries",
              "timedOut": false,
              "duration": 327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/time_entries',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==',\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  idToDel = JSON.stringify(response.data[0].id);\n  expect(response.data.length).to.deep.equal(2);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "f7738180-37f4-419f-a55b-ce420bc175a8",
              "parentUUID": "d6aeeefd-51dc-470e-ae43-a1e93e4a77e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a67abbe-36c0-4378-811a-698d870de499",
            "f7738180-37f4-419f-a55b-ce420bc175a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 961,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "08e83ab1-053b-4d20-94b2-b2f3f532e5b9",
          "title": "Deleting the Time Entry",
          "fullFile": "D:\\axios\\Assignment-Axios\\api-tests\\task1.js",
          "file": "\\api-tests\\task1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deleting Time Entry using the Id stored globally",
              "fullTitle": "Deleting the Time Entry Deleting Time Entry using the Id stored globally",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'delete',\n  maxBodyLength: Infinity,\n  url: `https://hassan.freshdesk.com/api/v2/time_entries/${idToDel}`,\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==', \n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(204);\n  console.log(\"Deleted Time Entry\");\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "b3c6d5f1-4a37-4069-9206-4fb05aed039f",
              "parentUUID": "08e83ab1-053b-4d20-94b2-b2f3f532e5b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting Time Entries after deletion",
              "fullTitle": "Deleting the Time Entry Getting Time Entries after deletion",
              "timedOut": false,
              "duration": 318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: 'https://hassan.freshdesk.com/api/v2/time_entries',\n  headers: { \n    'Authorization': 'Basic dnFBdG5PMWw4dUdMUzlyT21WcDk6WA==',\n  }\n};\n\nawait axios.request(config)\n.then((response) => {\n  expect(response.status).to.deep.equal(200);\n  expect(response.data.length).to.deep.equal(1);\n})\n.catch((error) => {\n  console.log(error);\n});",
              "err": {},
              "uuid": "17f2e724-71e1-48d8-92ac-510ab13cdfe9",
              "parentUUID": "08e83ab1-053b-4d20-94b2-b2f3f532e5b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3c6d5f1-4a37-4069-9206-4fb05aed039f",
            "17f2e724-71e1-48d8-92ac-510ab13cdfe9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 737,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}